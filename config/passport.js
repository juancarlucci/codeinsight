// const passport = require("passport");
// const mongoose = require("mongoose");
var User = require('../models/user');
// const User = mongoose.model('users');
// var FacebookStrategy = require('passport-facebook').Strategy;
const keys = require("./keys");
const GitHubStrategy = require('passport-github').Strategy;

/////////////////////////
// CREREATE User Token from user info. We got user info
// from the GitHubStrategy callback function.
// That token will be put into a cookie
module.exports = function(passport){
  passport.serializeUser(function(user, done) {
    //this user._id is not the profile.id
    // this is the id automatically generated by mongo
    //this allows us to use mutiple OAuth providers without collision
    done(null, user._id);
  });

//Token stored in Cookie in browser is now deserialized to
//turn token into User
  passport.deserializeUser(function(id, done) {
    User.findById(id, function(err, user) {
      console.log('deserializing user:',user);
      done(err, user);
    });
  });

  passport.use(new GitHubStrategy({
    clientID      : keys.githubClientID || process.env.GITHUB_CLIENT_ID,
    clientSecret  : keys.githubClientSecret || process.env.GITHUB_CLIENT_SECRET,
    callbackURL   : "http://localhost:3000/auth/github/callback",
    proxy         : true
  }, function(accessToken, refreshToken, profile, done) {

    console.log(profile);
    // User.findOrCreate({ 'gh.id' : profile.id }, function (err, user) {
    //   return done(err, user);
    // });
      User.findOne({ 'gh.id' : profile.id }, function(err, user) {
        if (err) return done(err);
        if (user) {
          return done(null, user);
        } else {

          var newUser = new User();
          newUser.gh.id           = profile.id;
          newUser.gh.username     = profile.username;

          newUser.save(function(err) {
            if (err)
              throw err;

            return done(null, newUser);
          });
        }

      });
  }));

}
